terraform {
  required_providers {
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.4"
    }
    aws = {
      source  = "registry.terraform.io/hashicorp/aws"
      version = "~> 4.0"
    }
    random = {
      source  = "registry.terraform.io/hashicorp/random"
      version = "~> 3.4"
    }
  }
}

provider "aws" {}
provider "aws" {
  region = "us-east-1"
  alias  = "us-east-1"
}

variable "hereyaProjectRootDir" {}
variable "isPublicImage" {
  type    = bool
  default = false
}
variable "imageName" {
  default = null
}
variable "forceDeleteRepository" {
  default = true
}
variable "builder" {
  default = "heroku/builder:22"
}

variable "dockerhubUsername" {
  default = null
}

variable "dockerhubPassword" {
  default   = null
  sensitive = true
}

data "aws_region" "current" {}

resource "random_pet" "generated_image_name" {
  count  = var.imageName != null ? 0 : 1
  length = 2
  prefix = basename(var.hereyaProjectRootDir)
}

data "archive_file" "sourceDir" {
  type        = "zip"
  source_dir  = var.hereyaProjectRootDir
  output_path = "${path.module}/hereyaProjectSource.zip"
}

locals {
  image_name     = var.imageName != null ? var.imageName : random_pet.generated_image_name.0.id
  image_tags     = [data.archive_file.sourceDir.output_sha256, "latest"]
  repository_url = var.isPublicImage ? aws_ecrpublic_repository.public.0.repository_uri : aws_ecr_repository.private.0.repository_url
  ecr_url        = dirname(local.repository_url)
  buildScript = templatefile("${path.module}/build.tpl", {
    projectRootDir = var.hereyaProjectRootDir
    imageName      = local.image_name
    builder        = var.builder
    imageTags      = join(" ", [for tag in local.image_tags : "\"${tag}\""])
    ecrUrl         = local.ecr_url
    ecrSubCommand  = var.isPublicImage ? "ecr-public" : "ecr"
    awsRegion      = var.isPublicImage ? "us-east-1" : data.aws_region.current.name
  })
}

resource "aws_ecr_repository" "private" {
  count        = var.isPublicImage ? 0 : 1
  name         = local.image_name
  force_delete = var.forceDeleteRepository

  image_scanning_configuration {
    scan_on_push = true
  }
}

resource "aws_ecrpublic_repository" "public" {
  count           = var.isPublicImage ? 1 : 0
  provider        = aws.us-east-1
  repository_name = local.image_name
}

resource "terraform_data" "build" {
  triggers_replace = [
    data.archive_file.sourceDir.output_sha256,
    local.buildScript
  ]

  provisioner "local-exec" {
    command     = local.buildScript
    interpreter = ["bash", "-c"]
    environment = {
      DOCKERHUB_USERNAME = var.dockerhubUsername
      DOCKERHUB_PASSWORD = var.dockerhubPassword
    }
  }
}

output "ecrImage" {
  description = "Docker image url generated by the build"
  value       = "${local.repository_url}:${local.image_tags[0]}"
}

output "ecrRepository" {
  value = local.image_name
}

output "ecrImageTag" {
  value = local.image_tags[0]
}
